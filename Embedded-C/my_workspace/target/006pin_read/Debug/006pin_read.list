
006pin_read.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000018c  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000334  0800033c  0001033c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000334  08000334  0001033c  2**0
                  CONTENTS
  4 .ARM          00000000  08000334  08000334  0001033c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000334  0800033c  0001033c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000334  08000334  00010334  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000338  08000338  00010338  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  0001033c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  0800033c  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  0800033c  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001033c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000013c  00000000  00000000  0001036c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000089  00000000  00000000  000104a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000048  00000000  00000000  00010538  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000030  00000000  00000000  00010580  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00000f02  00000000  00000000  000105b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00000411  00000000  00000000  000114b2  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00003b4d  00000000  00000000  000118c3  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00015410  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000058  00000000  00000000  0001548c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000000 	.word	0x20000000
 80001c4:	00000000 	.word	0x00000000
 80001c8:	0800031c 	.word	0x0800031c

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000004 	.word	0x20000004
 80001e4:	0800031c 	.word	0x0800031c

080001e8 <main>:
 */

#include <stdint.h>		// include this to use standardised type, e.g. uint32_t; avoids different implementations of int on different architectures

int main(void)
{
 80001e8:	b480      	push	{r7}
 80001ea:	b087      	sub	sp, #28
 80001ec:	af00      	add	r7, sp, #0
	uint32_t *pClkCtrlReg = (uint32_t*) (0x40023800 + 0x30);
 80001ee:	4b1f      	ldr	r3, [pc, #124]	; (800026c <main+0x84>)
 80001f0:	617b      	str	r3, [r7, #20]

	uint32_t *pPortAModeReg = (uint32_t*) (0x40020000 + 0x00);
 80001f2:	4b1f      	ldr	r3, [pc, #124]	; (8000270 <main+0x88>)
 80001f4:	613b      	str	r3, [r7, #16]
	uint32_t *pPortAInReg = (uint32_t*) (0x40020000 + 0x10);
 80001f6:	4b1f      	ldr	r3, [pc, #124]	; (8000274 <main+0x8c>)
 80001f8:	60fb      	str	r3, [r7, #12]

	uint32_t *pPortDModeReg = (uint32_t*) (0x40020c00 + 0x00);
 80001fa:	4b1f      	ldr	r3, [pc, #124]	; (8000278 <main+0x90>)
 80001fc:	60bb      	str	r3, [r7, #8]
	uint32_t *pPortDOutReg = (uint32_t*) (0x40020c00 + 0x14);
 80001fe:	4b1f      	ldr	r3, [pc, #124]	; (800027c <main+0x94>)
 8000200:	607b      	str	r3, [r7, #4]

	//1. ENABLE the CLOCK for GPIO A and GPIO D peripheral in AHB1 ENR
	*pClkCtrlReg |= (1 << 0);
 8000202:	697b      	ldr	r3, [r7, #20]
 8000204:	681b      	ldr	r3, [r3, #0]
 8000206:	f043 0201 	orr.w	r2, r3, #1
 800020a:	697b      	ldr	r3, [r7, #20]
 800020c:	601a      	str	r2, [r3, #0]
	*pClkCtrlReg |= (1 << 3);
 800020e:	697b      	ldr	r3, [r7, #20]
 8000210:	681b      	ldr	r3, [r3, #0]
 8000212:	f043 0208 	orr.w	r2, r3, #8
 8000216:	697b      	ldr	r3, [r7, #20]
 8000218:	601a      	str	r2, [r3, #0]

	//2. SET the MODE for GPIO A0 peripheral as INPUT (set them to 0)
	*pPortAModeReg &= ~(3 << 0);
 800021a:	693b      	ldr	r3, [r7, #16]
 800021c:	681b      	ldr	r3, [r3, #0]
 800021e:	f023 0203 	bic.w	r2, r3, #3
 8000222:	693b      	ldr	r3, [r7, #16]
 8000224:	601a      	str	r2, [r3, #0]

	//3. SET the MODE for GPIO D12 peripheral as OUTPUT
	// first, clear the bits (set them to 0);
	*pPortDModeReg &= ~(3 << 24);
 8000226:	68bb      	ldr	r3, [r7, #8]
 8000228:	681b      	ldr	r3, [r3, #0]
 800022a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800022e:	68bb      	ldr	r3, [r7, #8]
 8000230:	601a      	str	r2, [r3, #0]
	// second, need to set bits 25,24 to "01"
	*pPortDModeReg |= (1 << 24);
 8000232:	68bb      	ldr	r3, [r7, #8]
 8000234:	681b      	ldr	r3, [r3, #0]
 8000236:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 800023a:	68bb      	ldr	r3, [r7, #8]
 800023c:	601a      	str	r2, [r3, #0]

	while(1){
		//4. READ the INPUT from the GPIO A0 peripheral
		uint8_t pinStatus = (uint8_t)(*pPortAInReg & 0x1);
 800023e:	68fb      	ldr	r3, [r7, #12]
 8000240:	681b      	ldr	r3, [r3, #0]
 8000242:	b2db      	uxtb	r3, r3
 8000244:	f003 0301 	and.w	r3, r3, #1
 8000248:	70fb      	strb	r3, [r7, #3]

		//5. SET the OUTPUT DATA for GPIO D12 peripheral, based on pinStatus
		if(pinStatus){
 800024a:	78fb      	ldrb	r3, [r7, #3]
 800024c:	2b00      	cmp	r3, #0
 800024e:	d006      	beq.n	800025e <main+0x76>
			//turn on the LED
			*pPortDOutReg |= (1 << 12);
 8000250:	687b      	ldr	r3, [r7, #4]
 8000252:	681b      	ldr	r3, [r3, #0]
 8000254:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	601a      	str	r2, [r3, #0]
 800025c:	e7ef      	b.n	800023e <main+0x56>
		} else {
			//turn off the LED
			*pPortDOutReg &= ~(1 << 12);
 800025e:	687b      	ldr	r3, [r7, #4]
 8000260:	681b      	ldr	r3, [r3, #0]
 8000262:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8000266:	687b      	ldr	r3, [r7, #4]
 8000268:	601a      	str	r2, [r3, #0]
	while(1){
 800026a:	e7e8      	b.n	800023e <main+0x56>
 800026c:	40023830 	.word	0x40023830
 8000270:	40020000 	.word	0x40020000
 8000274:	40020010 	.word	0x40020010
 8000278:	40020c00 	.word	0x40020c00
 800027c:	40020c14 	.word	0x40020c14

08000280 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000280:	480d      	ldr	r0, [pc, #52]	; (80002b8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000282:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000284:	480d      	ldr	r0, [pc, #52]	; (80002bc <LoopForever+0x6>)
  ldr r1, =_edata
 8000286:	490e      	ldr	r1, [pc, #56]	; (80002c0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000288:	4a0e      	ldr	r2, [pc, #56]	; (80002c4 <LoopForever+0xe>)
  movs r3, #0
 800028a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800028c:	e002      	b.n	8000294 <LoopCopyDataInit>

0800028e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800028e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000290:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000292:	3304      	adds	r3, #4

08000294 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000294:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000296:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000298:	d3f9      	bcc.n	800028e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800029a:	4a0b      	ldr	r2, [pc, #44]	; (80002c8 <LoopForever+0x12>)
  ldr r4, =_ebss
 800029c:	4c0b      	ldr	r4, [pc, #44]	; (80002cc <LoopForever+0x16>)
  movs r3, #0
 800029e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002a0:	e001      	b.n	80002a6 <LoopFillZerobss>

080002a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002a4:	3204      	adds	r2, #4

080002a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002a8:	d3fb      	bcc.n	80002a2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80002aa:	f3af 8000 	nop.w
/* Call static constructors */
  bl __libc_init_array
 80002ae:	f000 f811 	bl	80002d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002b2:	f7ff ff99 	bl	80001e8 <main>

080002b6 <LoopForever>:

LoopForever:
    b LoopForever
 80002b6:	e7fe      	b.n	80002b6 <LoopForever>
  ldr   r0, =_estack
 80002b8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80002bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002c0:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80002c4:	0800033c 	.word	0x0800033c
  ldr r2, =_sbss
 80002c8:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80002cc:	2000001c 	.word	0x2000001c

080002d0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002d0:	e7fe      	b.n	80002d0 <ADC_IRQHandler>
	...

080002d4 <__libc_init_array>:
 80002d4:	b570      	push	{r4, r5, r6, lr}
 80002d6:	4e0d      	ldr	r6, [pc, #52]	; (800030c <__libc_init_array+0x38>)
 80002d8:	4c0d      	ldr	r4, [pc, #52]	; (8000310 <__libc_init_array+0x3c>)
 80002da:	1ba4      	subs	r4, r4, r6
 80002dc:	10a4      	asrs	r4, r4, #2
 80002de:	2500      	movs	r5, #0
 80002e0:	42a5      	cmp	r5, r4
 80002e2:	d109      	bne.n	80002f8 <__libc_init_array+0x24>
 80002e4:	4e0b      	ldr	r6, [pc, #44]	; (8000314 <__libc_init_array+0x40>)
 80002e6:	4c0c      	ldr	r4, [pc, #48]	; (8000318 <__libc_init_array+0x44>)
 80002e8:	f000 f818 	bl	800031c <_init>
 80002ec:	1ba4      	subs	r4, r4, r6
 80002ee:	10a4      	asrs	r4, r4, #2
 80002f0:	2500      	movs	r5, #0
 80002f2:	42a5      	cmp	r5, r4
 80002f4:	d105      	bne.n	8000302 <__libc_init_array+0x2e>
 80002f6:	bd70      	pop	{r4, r5, r6, pc}
 80002f8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80002fc:	4798      	blx	r3
 80002fe:	3501      	adds	r5, #1
 8000300:	e7ee      	b.n	80002e0 <__libc_init_array+0xc>
 8000302:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000306:	4798      	blx	r3
 8000308:	3501      	adds	r5, #1
 800030a:	e7f2      	b.n	80002f2 <__libc_init_array+0x1e>
 800030c:	08000334 	.word	0x08000334
 8000310:	08000334 	.word	0x08000334
 8000314:	08000334 	.word	0x08000334
 8000318:	08000338 	.word	0x08000338

0800031c <_init>:
 800031c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800031e:	bf00      	nop
 8000320:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000322:	bc08      	pop	{r3}
 8000324:	469e      	mov	lr, r3
 8000326:	4770      	bx	lr

08000328 <_fini>:
 8000328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800032a:	bf00      	nop
 800032c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800032e:	bc08      	pop	{r3}
 8000330:	469e      	mov	lr, r3
 8000332:	4770      	bx	lr
