/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * <h2><center>&copy; Copyright (c) 2019 STMicroelectronics.
 * All rights reserved.</center></h2>
 *
 * This software component is licensed by ST under BSD 3-Clause license,
 * the "License"; You may not use this file except in compliance with the
 * License. You may obtain a copy of the License at:
 *                        opensource.org/licenses/BSD-3-Clause
 *
 ******************************************************************************
 */


#include "main.h"

int main(void)
{
	/*
		uint32_t *pClkCtrlReg 	= (uint32_t*) (0x40023800 + 0x30);
		uint32_t *pPortDModeReg = (uint32_t*) (0x40020c00 + 0x00);
		uint32_t *pPortDOutReg 	= (uint32_t*) (0x40020c00 + 0x14);
*/
		//1. ENABLE the CLOCK for GPIO D peripheral in AHB1 ENR
		RCC_AHB1ENR_t volatile * const pClkCtrlReg =  (RCC_AHB1ENR_t *) 0x40023830;
		pClkCtrlReg->gpiod_en = 1;

		//2. SET the MODE for GPIO D12 peripheral
		GPIOx_MODE_t volatile * const pGPIO_D_Mode = 	(GPIOx_MODE_t*) 0x40020C00;
		pGPIO_D_Mode->pin_12 = 1;

		// 3. SET the OUTPUT DATA for GPIO D12 peripheral
		GPIOx_ODR_t volatile * const pPortDOutReg =	 	(GPIOx_ODR_t*) 	0x40020c14;
		pPortDOutReg->


		//*pPortDOutReg |= (1 << 12);
		//*pPortDOutReg &= ~(1 << 12);		// reset bit 12 to 0


		// 4. LOOP to FLASH the led
		uint32_t i = 0;
		while(1){
			if(!(i % 100000)){
				*pPortDOutReg ^= (1 << 12);
			}
			i++;
		}
		//return 0;





	for(;;);
}
