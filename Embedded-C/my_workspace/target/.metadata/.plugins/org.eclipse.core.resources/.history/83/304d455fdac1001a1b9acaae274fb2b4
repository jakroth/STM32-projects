/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * <h2><center>&copy; Copyright (c) 2019 STMicroelectronics.
 * All rights reserved.</center></h2>
 *
 * This software component is licensed by ST under BSD 3-Clause license,
 * the "License"; You may not use this file except in compliance with the
 * License. You may obtain a copy of the License at:
 *                        opensource.org/licenses/BSD-3-Clause
 *
 ******************************************************************************
 */


#include "main.h"

int main(void)
{
	RCC_AHB1ENR_t 	volatile * const pClkCtrlReg 	=  	(RCC_AHB1ENR_t *) 	0x40023830;
	GPIOx_MODE_t 	volatile * const pGPIO_D_Mode	= 	(GPIOx_MODE_t*) 	0x40020C00;
	GPIOx_ODR_t 	volatile * const pPortDOutReg 	=	(GPIOx_ODR_t*) 		0x40020c14;

	//1. ENABLE the CLOCK for GPIO D peripheral in AHB1 ENR
	pClkCtrlReg->gpiod_en = 1;

	//2. SET the MODE for GPIO D12-15 peripherals
	pGPIO_D_Mode->pin_12 = 1;
	pGPIO_D_Mode->pin_13 = 1;
	pGPIO_D_Mode->pin_14 = 1;
	pGPIO_D_Mode->pin_15 = 1;

	// 3. SET the OUTPUT DATA for GPIO D12 peripheral
	pPortDOutReg->pin_12 = 1;
	pPortDOutReg->pin_13 = 1;
	pPortDOutReg->pin_14 = 1;
	pPortDOutReg->pin_15 = 1;

	// 4. LOOP to FLASH the led
	uint32_t i = 0;
	while(1){
		if(!(i % 400000 == 0)){
			pPortDOutReg->pin_12 = ~(pPortDOutReg->pin_12);
		}
		else if((i % 400000 == 100000)){
			pPortDOutReg->pin_13 = ~(pPortDOutReg->pin_13);
		}
		else if((i % 400000 == 200000)){
			pPortDOutReg->pin_14 = ~(pPortDOutReg->pin_14);
		}
		else if((i % 400000 == 300000)){
			pPortDOutReg->pin_15 = ~(pPortDOutReg->pin_15);
		}
		i++;
	}
}
