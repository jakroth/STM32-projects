/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * <h2><center>&copy; Copyright (c) 2019 STMicroelectronics.
 * All rights reserved.</center></h2>
 *
 * This software component is licensed by ST under BSD 3-Clause license,
 * the "License"; You may not use this file except in compliance with the
 * License. You may obtain a copy of the License at:
 *                        opensource.org/licenses/BSD-3-Clause
 *
 ******************************************************************************
 */

#include <stdint.h>		// include this to use standardised type, e.g. uint32_t; avoids different implementations of int on different architectures

int main(void)
{
	uint32_t *pClkCtrlReg = (uint32_t*) (0x40023800 + 0x30);

	uint32_t *pPortAModeReg = (uint32_t*) (0x40020000 + 0x00);
	uint32_t *pPortAInReg = (uint32_t*) (0x40020000 + 0x10);

	uint32_t *pPortDModeReg = (uint32_t*) (0x40020c00 + 0x00);
	uint32_t *pPortDOutReg = (uint32_t*) (0x40020c00 + 0x14);

	//1. ENABLE the CLOCK for GPIO A and GPIO D peripheral in AHB1 ENR
	*pClkCtrlReg |= (1 << 0);
	*pClkCtrlReg |= (1 << 3);

	//2. SET the MODE for GPIO A0 peripheral as INPUT (set them to 0)
	*pPortDModeReg &= ~(3 << 0);

	//3. SET the MODE for GPIO D12 peripheral as OUTPUT
	// first, clear the bits (set them to 0);
	*pPortDModeReg &= ~(3 << 24);
	// second, need to set bits 25,24 to "01"
	*pPortDModeReg |= (1 << 24);


	//4. READ the INPUT from the GPIO A0 peripheral



	//5. SET the OUTPUT DATA for GPIO D12 peripheral
	*pPortDOutReg |= (1 << 12);

	while(1);
}


