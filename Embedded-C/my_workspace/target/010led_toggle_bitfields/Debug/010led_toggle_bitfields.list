
010led_toggle_bitfields.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000025c  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000404  0800040c  0001040c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000404  08000404  0001040c  2**0
                  CONTENTS
  4 .ARM          00000000  08000404  08000404  0001040c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000404  0800040c  0001040c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000404  08000404  00010404  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000408  08000408  00010408  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  0001040c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  0800040c  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  0800040c  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001040c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000004f7  00000000  00000000  0001043c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000000bf  00000000  00000000  00010933  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000048  00000000  00000000  000109f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000030  00000000  00000000  00010a40  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00000f0c  00000000  00000000  00010a70  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00000420  00000000  00000000  0001197c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00003cdc  00000000  00000000  00011d9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00015a78  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000058  00000000  00000000  00015af4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000000 	.word	0x20000000
 80001c4:	00000000 	.word	0x00000000
 80001c8:	080003ec 	.word	0x080003ec

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000004 	.word	0x20000004
 80001e4:	080003ec 	.word	0x080003ec

080001e8 <main>:


#include "main.h"

int main(void)
{
 80001e8:	b480      	push	{r7}
 80001ea:	b085      	sub	sp, #20
 80001ec:	af00      	add	r7, sp, #0
	RCC_AHB1ENR_t 	volatile * const pClkCtrlReg 	=  	(RCC_AHB1ENR_t *) 	0x40023830;
 80001ee:	4b50      	ldr	r3, [pc, #320]	; (8000330 <main+0x148>)
 80001f0:	60bb      	str	r3, [r7, #8]
	GPIOx_MODE_t 	volatile * const pGPIO_D_Mode	= 	(GPIOx_MODE_t*) 	0x40020C00;
 80001f2:	4b50      	ldr	r3, [pc, #320]	; (8000334 <main+0x14c>)
 80001f4:	607b      	str	r3, [r7, #4]
	GPIOx_ODR_t 	volatile * const pPortDOutReg 	=	(GPIOx_ODR_t*) 		0x40020c14;
 80001f6:	4b50      	ldr	r3, [pc, #320]	; (8000338 <main+0x150>)
 80001f8:	603b      	str	r3, [r7, #0]

	//1. ENABLE the CLOCK for GPIO D peripheral in AHB1 ENR
	pClkCtrlReg->gpiod_en = 1;
 80001fa:	68ba      	ldr	r2, [r7, #8]
 80001fc:	6813      	ldr	r3, [r2, #0]
 80001fe:	f043 0308 	orr.w	r3, r3, #8
 8000202:	6013      	str	r3, [r2, #0]

	//2. SET the MODE for GPIO D12-15 peripherals
	pGPIO_D_Mode->pin_12 = 1;
 8000204:	687a      	ldr	r2, [r7, #4]
 8000206:	6813      	ldr	r3, [r2, #0]
 8000208:	2101      	movs	r1, #1
 800020a:	f361 6319 	bfi	r3, r1, #24, #2
 800020e:	6013      	str	r3, [r2, #0]
	pGPIO_D_Mode->pin_13 = 1;
 8000210:	687a      	ldr	r2, [r7, #4]
 8000212:	6813      	ldr	r3, [r2, #0]
 8000214:	2101      	movs	r1, #1
 8000216:	f361 639b 	bfi	r3, r1, #26, #2
 800021a:	6013      	str	r3, [r2, #0]
	pGPIO_D_Mode->pin_14 = 1;
 800021c:	687a      	ldr	r2, [r7, #4]
 800021e:	6813      	ldr	r3, [r2, #0]
 8000220:	2101      	movs	r1, #1
 8000222:	f361 731d 	bfi	r3, r1, #28, #2
 8000226:	6013      	str	r3, [r2, #0]
	pGPIO_D_Mode->pin_15 = 1;
 8000228:	687a      	ldr	r2, [r7, #4]
 800022a:	6813      	ldr	r3, [r2, #0]
 800022c:	2101      	movs	r1, #1
 800022e:	f361 739f 	bfi	r3, r1, #30, #2
 8000232:	6013      	str	r3, [r2, #0]

	// 3. SET the OUTPUT DATA for GPIO D12 peripheral
	pPortDOutReg->pin_12 = 1;
 8000234:	683a      	ldr	r2, [r7, #0]
 8000236:	6813      	ldr	r3, [r2, #0]
 8000238:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800023c:	6013      	str	r3, [r2, #0]

	// 4. LOOP to FLASH the led
	uint32_t i = 0;
 800023e:	2300      	movs	r3, #0
 8000240:	60fb      	str	r3, [r7, #12]
	while(1){
		if(i % 400000 == 0){
 8000242:	68fa      	ldr	r2, [r7, #12]
 8000244:	09d3      	lsrs	r3, r2, #7
 8000246:	493d      	ldr	r1, [pc, #244]	; (800033c <main+0x154>)
 8000248:	fba1 1303 	umull	r1, r3, r1, r3
 800024c:	091b      	lsrs	r3, r3, #4
 800024e:	493c      	ldr	r1, [pc, #240]	; (8000340 <main+0x158>)
 8000250:	fb01 f303 	mul.w	r3, r1, r3
 8000254:	1ad3      	subs	r3, r2, r3
 8000256:	2b00      	cmp	r3, #0
 8000258:	d10f      	bne.n	800027a <main+0x92>
			pPortDOutReg->pin_12 = ~(pPortDOutReg->pin_12);
 800025a:	683b      	ldr	r3, [r7, #0]
 800025c:	681b      	ldr	r3, [r3, #0]
 800025e:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8000262:	b2db      	uxtb	r3, r3
 8000264:	43db      	mvns	r3, r3
 8000266:	b2db      	uxtb	r3, r3
 8000268:	f003 0301 	and.w	r3, r3, #1
 800026c:	b2d9      	uxtb	r1, r3
 800026e:	683a      	ldr	r2, [r7, #0]
 8000270:	6813      	ldr	r3, [r2, #0]
 8000272:	f361 330c 	bfi	r3, r1, #12, #1
 8000276:	6013      	str	r3, [r2, #0]
 8000278:	e055      	b.n	8000326 <main+0x13e>
		}
		else if(i % 400000 == 100000){
 800027a:	68fa      	ldr	r2, [r7, #12]
 800027c:	09d3      	lsrs	r3, r2, #7
 800027e:	492f      	ldr	r1, [pc, #188]	; (800033c <main+0x154>)
 8000280:	fba1 1303 	umull	r1, r3, r1, r3
 8000284:	091b      	lsrs	r3, r3, #4
 8000286:	492e      	ldr	r1, [pc, #184]	; (8000340 <main+0x158>)
 8000288:	fb01 f303 	mul.w	r3, r1, r3
 800028c:	1ad3      	subs	r3, r2, r3
 800028e:	4a2d      	ldr	r2, [pc, #180]	; (8000344 <main+0x15c>)
 8000290:	4293      	cmp	r3, r2
 8000292:	d10f      	bne.n	80002b4 <main+0xcc>
			pPortDOutReg->pin_13 = ~(pPortDOutReg->pin_13);
 8000294:	683b      	ldr	r3, [r7, #0]
 8000296:	681b      	ldr	r3, [r3, #0]
 8000298:	f3c3 3340 	ubfx	r3, r3, #13, #1
 800029c:	b2db      	uxtb	r3, r3
 800029e:	43db      	mvns	r3, r3
 80002a0:	b2db      	uxtb	r3, r3
 80002a2:	f003 0301 	and.w	r3, r3, #1
 80002a6:	b2d9      	uxtb	r1, r3
 80002a8:	683a      	ldr	r2, [r7, #0]
 80002aa:	6813      	ldr	r3, [r2, #0]
 80002ac:	f361 334d 	bfi	r3, r1, #13, #1
 80002b0:	6013      	str	r3, [r2, #0]
 80002b2:	e038      	b.n	8000326 <main+0x13e>
		}
		else if(i % 400000 == 200000){
 80002b4:	68fa      	ldr	r2, [r7, #12]
 80002b6:	09d3      	lsrs	r3, r2, #7
 80002b8:	4920      	ldr	r1, [pc, #128]	; (800033c <main+0x154>)
 80002ba:	fba1 1303 	umull	r1, r3, r1, r3
 80002be:	091b      	lsrs	r3, r3, #4
 80002c0:	491f      	ldr	r1, [pc, #124]	; (8000340 <main+0x158>)
 80002c2:	fb01 f303 	mul.w	r3, r1, r3
 80002c6:	1ad3      	subs	r3, r2, r3
 80002c8:	4a1f      	ldr	r2, [pc, #124]	; (8000348 <main+0x160>)
 80002ca:	4293      	cmp	r3, r2
 80002cc:	d10f      	bne.n	80002ee <main+0x106>
			pPortDOutReg->pin_14 = ~(pPortDOutReg->pin_14);
 80002ce:	683b      	ldr	r3, [r7, #0]
 80002d0:	681b      	ldr	r3, [r3, #0]
 80002d2:	f3c3 3380 	ubfx	r3, r3, #14, #1
 80002d6:	b2db      	uxtb	r3, r3
 80002d8:	43db      	mvns	r3, r3
 80002da:	b2db      	uxtb	r3, r3
 80002dc:	f003 0301 	and.w	r3, r3, #1
 80002e0:	b2d9      	uxtb	r1, r3
 80002e2:	683a      	ldr	r2, [r7, #0]
 80002e4:	6813      	ldr	r3, [r2, #0]
 80002e6:	f361 338e 	bfi	r3, r1, #14, #1
 80002ea:	6013      	str	r3, [r2, #0]
 80002ec:	e01b      	b.n	8000326 <main+0x13e>
		}
		else if(i % 400000 == 300000){
 80002ee:	68fa      	ldr	r2, [r7, #12]
 80002f0:	09d3      	lsrs	r3, r2, #7
 80002f2:	4912      	ldr	r1, [pc, #72]	; (800033c <main+0x154>)
 80002f4:	fba1 1303 	umull	r1, r3, r1, r3
 80002f8:	091b      	lsrs	r3, r3, #4
 80002fa:	4911      	ldr	r1, [pc, #68]	; (8000340 <main+0x158>)
 80002fc:	fb01 f303 	mul.w	r3, r1, r3
 8000300:	1ad3      	subs	r3, r2, r3
 8000302:	4a12      	ldr	r2, [pc, #72]	; (800034c <main+0x164>)
 8000304:	4293      	cmp	r3, r2
 8000306:	d10e      	bne.n	8000326 <main+0x13e>
			pPortDOutReg->pin_15 = ~(pPortDOutReg->pin_15);
 8000308:	683b      	ldr	r3, [r7, #0]
 800030a:	681b      	ldr	r3, [r3, #0]
 800030c:	f3c3 33c0 	ubfx	r3, r3, #15, #1
 8000310:	b2db      	uxtb	r3, r3
 8000312:	43db      	mvns	r3, r3
 8000314:	b2db      	uxtb	r3, r3
 8000316:	f003 0301 	and.w	r3, r3, #1
 800031a:	b2d9      	uxtb	r1, r3
 800031c:	683a      	ldr	r2, [r7, #0]
 800031e:	6813      	ldr	r3, [r2, #0]
 8000320:	f361 33cf 	bfi	r3, r1, #15, #1
 8000324:	6013      	str	r3, [r2, #0]
		}
		i++;
 8000326:	68fb      	ldr	r3, [r7, #12]
 8000328:	3301      	adds	r3, #1
 800032a:	60fb      	str	r3, [r7, #12]
		if(i % 400000 == 0){
 800032c:	e789      	b.n	8000242 <main+0x5a>
 800032e:	bf00      	nop
 8000330:	40023830 	.word	0x40023830
 8000334:	40020c00 	.word	0x40020c00
 8000338:	40020c14 	.word	0x40020c14
 800033c:	014f8b59 	.word	0x014f8b59
 8000340:	00061a80 	.word	0x00061a80
 8000344:	000186a0 	.word	0x000186a0
 8000348:	00030d40 	.word	0x00030d40
 800034c:	000493e0 	.word	0x000493e0

08000350 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000350:	480d      	ldr	r0, [pc, #52]	; (8000388 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000352:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000354:	480d      	ldr	r0, [pc, #52]	; (800038c <LoopForever+0x6>)
  ldr r1, =_edata
 8000356:	490e      	ldr	r1, [pc, #56]	; (8000390 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000358:	4a0e      	ldr	r2, [pc, #56]	; (8000394 <LoopForever+0xe>)
  movs r3, #0
 800035a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800035c:	e002      	b.n	8000364 <LoopCopyDataInit>

0800035e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800035e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000360:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000362:	3304      	adds	r3, #4

08000364 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000364:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000366:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000368:	d3f9      	bcc.n	800035e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800036a:	4a0b      	ldr	r2, [pc, #44]	; (8000398 <LoopForever+0x12>)
  ldr r4, =_ebss
 800036c:	4c0b      	ldr	r4, [pc, #44]	; (800039c <LoopForever+0x16>)
  movs r3, #0
 800036e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000370:	e001      	b.n	8000376 <LoopFillZerobss>

08000372 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000372:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000374:	3204      	adds	r2, #4

08000376 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000376:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000378:	d3fb      	bcc.n	8000372 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800037a:	f3af 8000 	nop.w
/* Call static constructors */
  bl __libc_init_array
 800037e:	f000 f811 	bl	80003a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000382:	f7ff ff31 	bl	80001e8 <main>

08000386 <LoopForever>:

LoopForever:
    b LoopForever
 8000386:	e7fe      	b.n	8000386 <LoopForever>
  ldr   r0, =_estack
 8000388:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800038c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000390:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000394:	0800040c 	.word	0x0800040c
  ldr r2, =_sbss
 8000398:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800039c:	2000001c 	.word	0x2000001c

080003a0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003a0:	e7fe      	b.n	80003a0 <ADC_IRQHandler>
	...

080003a4 <__libc_init_array>:
 80003a4:	b570      	push	{r4, r5, r6, lr}
 80003a6:	4e0d      	ldr	r6, [pc, #52]	; (80003dc <__libc_init_array+0x38>)
 80003a8:	4c0d      	ldr	r4, [pc, #52]	; (80003e0 <__libc_init_array+0x3c>)
 80003aa:	1ba4      	subs	r4, r4, r6
 80003ac:	10a4      	asrs	r4, r4, #2
 80003ae:	2500      	movs	r5, #0
 80003b0:	42a5      	cmp	r5, r4
 80003b2:	d109      	bne.n	80003c8 <__libc_init_array+0x24>
 80003b4:	4e0b      	ldr	r6, [pc, #44]	; (80003e4 <__libc_init_array+0x40>)
 80003b6:	4c0c      	ldr	r4, [pc, #48]	; (80003e8 <__libc_init_array+0x44>)
 80003b8:	f000 f818 	bl	80003ec <_init>
 80003bc:	1ba4      	subs	r4, r4, r6
 80003be:	10a4      	asrs	r4, r4, #2
 80003c0:	2500      	movs	r5, #0
 80003c2:	42a5      	cmp	r5, r4
 80003c4:	d105      	bne.n	80003d2 <__libc_init_array+0x2e>
 80003c6:	bd70      	pop	{r4, r5, r6, pc}
 80003c8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80003cc:	4798      	blx	r3
 80003ce:	3501      	adds	r5, #1
 80003d0:	e7ee      	b.n	80003b0 <__libc_init_array+0xc>
 80003d2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80003d6:	4798      	blx	r3
 80003d8:	3501      	adds	r5, #1
 80003da:	e7f2      	b.n	80003c2 <__libc_init_array+0x1e>
 80003dc:	08000404 	.word	0x08000404
 80003e0:	08000404 	.word	0x08000404
 80003e4:	08000404 	.word	0x08000404
 80003e8:	08000408 	.word	0x08000408

080003ec <_init>:
 80003ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003ee:	bf00      	nop
 80003f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003f2:	bc08      	pop	{r3}
 80003f4:	469e      	mov	lr, r3
 80003f6:	4770      	bx	lr

080003f8 <_fini>:
 80003f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003fa:	bf00      	nop
 80003fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003fe:	bc08      	pop	{r3}
 8000400:	469e      	mov	lr, r3
 8000402:	4770      	bx	lr
